[[ -f ~/.zshrc-private ]] && source ~/.zshrc-private

if [[ ! -v OLD_CLEAR ]]; then
    OLD_CLEAR="$(which clear)"
fi

clear() {
    $OLD_CLEAR && printf '\e[3J'
}

clear

title() {
    echo -n -e "\033]0;$1\007"
}

echo -n -e "\033]0; \007"

cd $HOME/Desktop
PROMPT="$ "

PATH="/Users/hexdump/Library/Python/2.7/bin:$PATH"
PATH="/Users/hexdump/Library/Python/3.7/bin:$PATH"
PATH="/usr/local/sbin:$PATH"
PATH="/Users/hexdump/.bin:$PATH"

alias cd="HOME=~/Desktop/ cd"

setopt HIST_IGNORE_SPACE
HISTFILE=~/.zsh_history
HISTSIZE=100000
SAVEHIST=100000


export NVM_DIR="$HOME/.nvm"
nvm() {
    . "$(brew --prefix nvm)/nvm.sh"
    nvm
}

doctor() {
    cat ~/.zsh_history \
        | grep -v "^ls$" \
        | grep -v "^clear$" \
               > ~/.zsh_history.tmp
    mv ~/.zsh_history.tmp ~/.zsh_history
    brew update
    brew upgrade
    brew doctor
}

simg() {
    convert "$2" -strip "$(date +%s).$1"
}

docker-current-container() {
    docker ps \
        | grep -o "[0-9a-z]*" \
        | head -n 2 \
        | tail -n 1
}

hash-stdin() {
    shasum | grep -o "[a-z0-9]+"
}

hash-directory() {
    find $1 -type f -print0 \
        | sort -z \
        | xargs -0 shasum \
        | hash-stdin
}

hash-file() {
    shasum $1 | grep -o "[a-z0-9]+"
}

alias c="clear"
alias ls="ls -1"
alias ls-not-dash1="/bin/ls"
alias l="ls -1"

export EDITOR="emacs"
#unsetopt list_ambiguous
#unsetopt menucomplete
#setopt automenu
zstyle ':completion:*' insert-unambiguous true

notify() {
    say "$2"
    osascript -e "display notification \"$2\" with title \"$1\""
}

alias sleep-seconds="sleep"

sleep-minutes() {
    for _ in {1..60}; do
        sleep-seconds "$1"
    done
}

sleep-hours() {
    for _ in {1..60}; do
        sleep-minutes "$1"
    done
}


stand-sit-walk-schedule() {
    while true; do
        notify "sit-stand-schedule" "stand!"
        echo stand
        sleep-minutes 20
        notify "sit-stand-schedule" "sit!"
        echo sit
        sleep-minutes 8
        notify "sit-stand-schedule" "walk!"
        echo walk
        sleep-minutes 2
    done
}

stand-sit-walk-schedule-lazy() {
    while true; do
        notify "sit-stand-schedule" "stand!"
        echo stand
        sleep-minutes 10
        notify "sit-stand-schedule" "sit!"
        echo sit
        sleep-minutes 20
    done
}

reset() {
    rm -rf ~/Desktop/alexandria-test/intake
    rm -rf ~/Desktop/alexandria-test/alexandria
    cp -r ~/Desktop/alexandria-test/example-intake ~/Desktop/alexandria-test/intake
    mkdir ~/Desktop/alexandria-test/alexandria
}

work-gdcapi-build-openapi() {
    docker build -t gdcapi-test -f Dockerfile.dev . && docker-compose up --abort-on-container-exit | grep 'api_1  |' | cut -c 19- | tail -n +194 > openapi.json
}

random-generate-file() {
}

if [ -z "$OLD_GIT" ]; then
    OLD_GIT="$(which git)"
fi
function git {
  if [[ "$1" == "push" && "$@" != *"--help"* ]]; then
      if "$OLD_GIT" --no-pager log -n 20 --pretty=oneline | grep -q '(step)'; then
          echo "un-squashed work!"          
      else
          "$OLD_GIT" "$@"
      fi
  elif [[ "$1" == "squash" && "$@" != *"--help"* ]]; then
      git rebase -i HEAD~"$2"
  else
      "$OLD_GIT" "$@"
  fi
}

alias e="emacs"
alias c="cd"

sarcastify-text() {
    echo $1 | sarcastify
}

sarcastify-clipboard() {
    pbpaste | sarcastify | pbcopy
}

permissions() {
    stat -f 'permissions %A, owned by user %Su and group %Sg' "$1"
}

github-clone() {
    git clone "git@github.com:hexdump/$1"
}

flush-dns() {
    sudo dscacheutil -flushcache
}

image-date() {
    mdls "$1" | grep "kMDItemContentCreationDate " | cut -c42- | rev | cut -c19- | rev | tr - /
}

image-archive() {
    for file in "$@"
    do
        echo mkdir -p ~/Desktop/images/$(image-date "$file")
        echo mv "$file" ~/Desktop/images/$(image-date "$file")/"$(basename $file)"
    done
}

image-archive-today() {
    for file in "$@"
    do
        mkdir -p ~/Desktop/images/$(date +'%Y/%m')
        mv "$file" ~/Desktop/images/$(date +'%Y/%m')/"$(basename $file)"
    done
}

image-sync() {
    echo "syncing nextcloud -> ~/Desktop/images"
    echo "syncing ~/Desktop/images -> nextcloud"
    rclone copy nextcloud:images ~/Desktop/images --progress
    rclone copy ~/Desktop/images nextcloud:images --progress
}

count-files() {
    ls "$1" | wc -l
}

executable() {
    chmod +x "$1"
}
